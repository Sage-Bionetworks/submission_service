# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.list_queue_response_all_of import ListQueueResponseAllOf
from openapi_server.models.list_response_metadata import ListResponseMetadata
from openapi_server.models.list_response_metadata_links import ListResponseMetadataLinks
from openapi_server.models.queue import Queue
from openapi_server import util

from openapi_server.models.list_queue_response_all_of import ListQueueResponseAllOf  # noqa: E501
from openapi_server.models.list_response_metadata import ListResponseMetadata  # noqa: E501
from openapi_server.models.list_response_metadata_links import ListResponseMetadataLinks  # noqa: E501
from openapi_server.models.queue import Queue  # noqa: E501

class ListQueueResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset=None, limit=None, links=None, total_results=None, queues=None):  # noqa: E501
        """ListQueueResponse - a model defined in OpenAPI

        :param offset: The offset of this ListQueueResponse.  # noqa: E501
        :type offset: int
        :param limit: The limit of this ListQueueResponse.  # noqa: E501
        :type limit: int
        :param links: The links of this ListQueueResponse.  # noqa: E501
        :type links: ListResponseMetadataLinks
        :param total_results: The total_results of this ListQueueResponse.  # noqa: E501
        :type total_results: int
        :param queues: The queues of this ListQueueResponse.  # noqa: E501
        :type queues: List[Queue]
        """
        self.openapi_types = {
            'offset': int,
            'limit': int,
            'links': ListResponseMetadataLinks,
            'total_results': int,
            'queues': List[Queue]
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'links': 'links',
            'total_results': 'totalResults',
            'queues': 'queues'
        }

        self._offset = offset
        self._limit = limit
        self._links = links
        self._total_results = total_results
        self._queues = queues

    @classmethod
    def from_dict(cls, dikt) -> 'ListQueueResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ListQueueResponse of this ListQueueResponse.  # noqa: E501
        :rtype: ListQueueResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this ListQueueResponse.

        Index of the first result that must be returned  # noqa: E501

        :return: The offset of this ListQueueResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ListQueueResponse.

        Index of the first result that must be returned  # noqa: E501

        :param offset: The offset of this ListQueueResponse.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this ListQueueResponse.

        Maximum number of results returned  # noqa: E501

        :return: The limit of this ListQueueResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListQueueResponse.

        Maximum number of results returned  # noqa: E501

        :param limit: The limit of this ListQueueResponse.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def links(self):
        """Gets the links of this ListQueueResponse.


        :return: The links of this ListQueueResponse.
        :rtype: ListResponseMetadataLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ListQueueResponse.


        :param links: The links of this ListQueueResponse.
        :type links: ListResponseMetadataLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def total_results(self):
        """Gets the total_results of this ListQueueResponse.

        The total number of results in the result set  # noqa: E501

        :return: The total_results of this ListQueueResponse.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this ListQueueResponse.

        The total number of results in the result set  # noqa: E501

        :param total_results: The total_results of this ListQueueResponse.
        :type total_results: int
        """
        if total_results is None:
            raise ValueError("Invalid value for `total_results`, must not be `None`")  # noqa: E501

        self._total_results = total_results

    @property
    def queues(self):
        """Gets the queues of this ListQueueResponse.

        An array of queues  # noqa: E501

        :return: The queues of this ListQueueResponse.
        :rtype: List[Queue]
        """
        return self._queues

    @queues.setter
    def queues(self, queues):
        """Sets the queues of this ListQueueResponse.

        An array of queues  # noqa: E501

        :param queues: The queues of this ListQueueResponse.
        :type queues: List[Queue]
        """

        self._queues = queues
