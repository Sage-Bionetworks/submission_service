# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.openapi import util


class ComputeEnv(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, api_host='localhost:8080', type=None):  # noqa: E501
        """ComputeEnv - a model defined in OpenAPI

        :param id: The id of this ComputeEnv.  # noqa: E501
        :type id: str
        :param name: The name of this ComputeEnv.  # noqa: E501
        :type name: str
        :param api_host: The api_host of this ComputeEnv.  # noqa: E501
        :type api_host: str
        :param type: The type of this ComputeEnv.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'api_host': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'api_host': 'apiHost',
            'type': 'type'
        }

        self._id = id
        self._name = name
        self._api_host = api_host
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'ComputeEnv':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ComputeEnv of this ComputeEnv.  # noqa: E501
        :rtype: ComputeEnv
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ComputeEnv.

        Compute environment ID  # noqa: E501

        :return: The id of this ComputeEnv.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComputeEnv.

        Compute environment ID  # noqa: E501

        :param id: The id of this ComputeEnv.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ComputeEnv.

        Name of compute environment  # noqa: E501

        :return: The name of this ComputeEnv.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComputeEnv.

        Name of compute environment  # noqa: E501

        :param name: The name of this ComputeEnv.
        :type name: str
        """

        self._name = name

    @property
    def api_host(self):
        """Gets the api_host of this ComputeEnv.

        Workflow Execution Service implementation endpoint  # noqa: E501

        :return: The api_host of this ComputeEnv.
        :rtype: str
        """
        return self._api_host

    @api_host.setter
    def api_host(self, api_host):
        """Sets the api_host of this ComputeEnv.

        Workflow Execution Service implementation endpoint  # noqa: E501

        :param api_host: The api_host of this ComputeEnv.
        :type api_host: str
        """

        self._api_host = api_host

    @property
    def type(self):
        """Gets the type of this ComputeEnv.

        Type of Compute Environment  # noqa: E501

        :return: The type of this ComputeEnv.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComputeEnv.

        Type of Compute Environment  # noqa: E501

        :param type: The type of this ComputeEnv.
        :type type: str
        """
        allowed_values = ["WES", "TES"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
