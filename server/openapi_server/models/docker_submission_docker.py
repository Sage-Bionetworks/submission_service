# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.openapi import util


class DockerSubmissionDocker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, digest=None, entrypoint=None):  # noqa: E501
        """DockerSubmissionDocker - a model defined in OpenAPI

        :param name: The name of this DockerSubmissionDocker.  # noqa: E501
        :type name: str
        :param digest: The digest of this DockerSubmissionDocker.  # noqa: E501
        :type digest: str
        :param entrypoint: The entrypoint of this DockerSubmissionDocker.  # noqa: E501
        :type entrypoint: str
        """
        self.openapi_types = {
            'name': str,
            'digest': str,
            'entrypoint': str
        }

        self.attribute_map = {
            'name': 'name',
            'digest': 'digest',
            'entrypoint': 'entrypoint'
        }

        self._name = name
        self._digest = digest
        self._entrypoint = entrypoint

    @classmethod
    def from_dict(cls, dikt) -> 'DockerSubmissionDocker':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DockerSubmission_docker of this DockerSubmissionDocker.  # noqa: E501
        :rtype: DockerSubmissionDocker
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DockerSubmissionDocker.

        Docker repository name  # noqa: E501

        :return: The name of this DockerSubmissionDocker.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DockerSubmissionDocker.

        Docker repository name  # noqa: E501

        :param name: The name of this DockerSubmissionDocker.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def digest(self):
        """Gets the digest of this DockerSubmissionDocker.

        Docker digest  # noqa: E501

        :return: The digest of this DockerSubmissionDocker.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this DockerSubmissionDocker.

        Docker digest  # noqa: E501

        :param digest: The digest of this DockerSubmissionDocker.
        :type digest: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")  # noqa: E501

        self._digest = digest

    @property
    def entrypoint(self):
        """Gets the entrypoint of this DockerSubmissionDocker.

        Docker entrypoint.  The default assumes that the docker image is built with a predefined entrypoint.  # noqa: E501

        :return: The entrypoint of this DockerSubmissionDocker.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this DockerSubmissionDocker.

        Docker entrypoint.  The default assumes that the docker image is built with a predefined entrypoint.  # noqa: E501

        :param entrypoint: The entrypoint of this DockerSubmissionDocker.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint
