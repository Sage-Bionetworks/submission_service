# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.openapi import util


class Run(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, data=None, data_version=None, status=None):  # noqa: E501
        """Run - a model defined in OpenAPI

        :param id: The id of this Run.  # noqa: E501
        :type id: str
        :param data: The data of this Run.  # noqa: E501
        :type data: str
        :param data_version: The data_version of this Run.  # noqa: E501
        :type data_version: str
        :param status: The status of this Run.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'id': str,
            'data': str,
            'data_version': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'data': 'data',
            'data_version': 'dataVersion',
            'status': 'status'
        }

        self._id = id
        self._data = data
        self._data_version = data_version
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Run':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Run of this Run.  # noqa: E501
        :rtype: Run
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Run.

        Run Id  # noqa: E501

        :return: The id of this Run.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Run.

        Run Id  # noqa: E501

        :param id: The id of this Run.
        :type id: str
        """

        self._id = id

    @property
    def data(self):
        """Gets the data of this Run.

        Data location  # noqa: E501

        :return: The data of this Run.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Run.

        Data location  # noqa: E501

        :param data: The data of this Run.
        :type data: str
        """

        self._data = data

    @property
    def data_version(self):
        """Gets the data_version of this Run.

        Data version  # noqa: E501

        :return: The data_version of this Run.
        :rtype: str
        """
        return self._data_version

    @data_version.setter
    def data_version(self, data_version):
        """Sets the data_version of this Run.

        Data version  # noqa: E501

        :param data_version: The data_version of this Run.
        :type data_version: str
        """

        self._data_version = data_version

    @property
    def status(self):
        """Gets the status of this Run.

        Submission Run status  # noqa: E501

        :return: The status of this Run.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Run.

        Submission Run status  # noqa: E501

        :param status: The status of this Run.
        :type status: str
        """
        allowed_values = ["QUEUED", "RUNNING", "COMPLETE", "ERROR", "CANCELLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
