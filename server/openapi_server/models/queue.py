# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Queue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queue_id=None, wes_api_host='local', workflow_files=None, workflow_input=None, submission_type=None):  # noqa: E501
        """Queue - a model defined in OpenAPI

        :param queue_id: The queue_id of this Queue.  # noqa: E501
        :type queue_id: int
        :param wes_api_host: The wes_api_host of this Queue.  # noqa: E501
        :type wes_api_host: str
        :param workflow_files: The workflow_files of this Queue.  # noqa: E501
        :type workflow_files: List[str]
        :param workflow_input: The workflow_input of this Queue.  # noqa: E501
        :type workflow_input: str
        :param submission_type: The submission_type of this Queue.  # noqa: E501
        :type submission_type: str
        """
        self.openapi_types = {
            'queue_id': int,
            'wes_api_host': str,
            'workflow_files': List[str],
            'workflow_input': str,
            'submission_type': str
        }

        self.attribute_map = {
            'queue_id': 'queueId',
            'wes_api_host': 'wesApiHost',
            'workflow_files': 'workflowFiles',
            'workflow_input': 'workflowInput',
            'submission_type': 'submissionType'
        }

        self._queue_id = queue_id
        self._wes_api_host = wes_api_host
        self._workflow_files = workflow_files
        self._workflow_input = workflow_input
        self._submission_type = submission_type

    @classmethod
    def from_dict(cls, dikt) -> 'Queue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Queue of this Queue.  # noqa: E501
        :rtype: Queue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queue_id(self):
        """Gets the queue_id of this Queue.

        Queue Id  # noqa: E501

        :return: The queue_id of this Queue.
        :rtype: int
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this Queue.

        Queue Id  # noqa: E501

        :param queue_id: The queue_id of this Queue.
        :type queue_id: int
        """

        self._queue_id = queue_id

    @property
    def wes_api_host(self):
        """Gets the wes_api_host of this Queue.

        Workflow Execution Service implementation endpoint  # noqa: E501

        :return: The wes_api_host of this Queue.
        :rtype: str
        """
        return self._wes_api_host

    @wes_api_host.setter
    def wes_api_host(self, wes_api_host):
        """Sets the wes_api_host of this Queue.

        Workflow Execution Service implementation endpoint  # noqa: E501

        :param wes_api_host: The wes_api_host of this Queue.
        :type wes_api_host: str
        """

        self._wes_api_host = wes_api_host

    @property
    def workflow_files(self):
        """Gets the workflow_files of this Queue.

        Workflow/Tool files and templates  # noqa: E501

        :return: The workflow_files of this Queue.
        :rtype: List[str]
        """
        return self._workflow_files

    @workflow_files.setter
    def workflow_files(self, workflow_files):
        """Sets the workflow_files of this Queue.

        Workflow/Tool files and templates  # noqa: E501

        :param workflow_files: The workflow_files of this Queue.
        :type workflow_files: List[str]
        """

        self._workflow_files = workflow_files

    @property
    def workflow_input(self):
        """Gets the workflow_input of this Queue.

        Path to workflow inputs  # noqa: E501

        :return: The workflow_input of this Queue.
        :rtype: str
        """
        return self._workflow_input

    @workflow_input.setter
    def workflow_input(self, workflow_input):
        """Sets the workflow_input of this Queue.

        Path to workflow inputs  # noqa: E501

        :param workflow_input: The workflow_input of this Queue.
        :type workflow_input: str
        """

        self._workflow_input = workflow_input

    @property
    def submission_type(self):
        """Gets the submission_type of this Queue.

        Path to workflow inputs  # noqa: E501

        :return: The submission_type of this Queue.
        :rtype: str
        """
        return self._submission_type

    @submission_type.setter
    def submission_type(self, submission_type):
        """Sets the submission_type of this Queue.

        Path to workflow inputs  # noqa: E501

        :param submission_type: The submission_type of this Queue.
        :type submission_type: str
        """
        allowed_values = ["docker", "file", "workflow", "workflow_inputs"]  # noqa: E501
        if submission_type not in allowed_values:
            raise ValueError(
                "Invalid value for `submission_type` ({0}), must be one of {1}"
                .format(submission_type, allowed_values)
            )

        self._submission_type = submission_type
