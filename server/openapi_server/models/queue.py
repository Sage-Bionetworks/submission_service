# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.openapi import util


class Queue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, compute_id=None, workflow_files=None, workflow_input=None, created_on=None, submission_type=None):  # noqa: E501
        """Queue - a model defined in OpenAPI

        :param id: The id of this Queue.  # noqa: E501
        :type id: int
        :param name: The name of this Queue.  # noqa: E501
        :type name: str
        :param compute_id: The compute_id of this Queue.  # noqa: E501
        :type compute_id: str
        :param workflow_files: The workflow_files of this Queue.  # noqa: E501
        :type workflow_files: List[str]
        :param workflow_input: The workflow_input of this Queue.  # noqa: E501
        :type workflow_input: str
        :param created_on: The created_on of this Queue.  # noqa: E501
        :type created_on: datetime
        :param submission_type: The submission_type of this Queue.  # noqa: E501
        :type submission_type: str
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'compute_id': str,
            'workflow_files': List[str],
            'workflow_input': str,
            'created_on': datetime,
            'submission_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'compute_id': 'computeId',
            'workflow_files': 'workflowFiles',
            'workflow_input': 'workflowInput',
            'created_on': 'createdOn',
            'submission_type': 'submissionType'
        }

        self._id = id
        self._name = name
        self._compute_id = compute_id
        self._workflow_files = workflow_files
        self._workflow_input = workflow_input
        self._created_on = created_on
        self._submission_type = submission_type

    @classmethod
    def from_dict(cls, dikt) -> 'Queue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Queue of this Queue.  # noqa: E501
        :rtype: Queue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Queue.

        Queue Id  # noqa: E501

        :return: The id of this Queue.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Queue.

        Queue Id  # noqa: E501

        :param id: The id of this Queue.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Queue.

        Name of Queue  # noqa: E501

        :return: The name of this Queue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Queue.

        Name of Queue  # noqa: E501

        :param name: The name of this Queue.
        :type name: str
        """

        self._name = name

    @property
    def compute_id(self):
        """Gets the compute_id of this Queue.

        Compute Environment Id  # noqa: E501

        :return: The compute_id of this Queue.
        :rtype: str
        """
        return self._compute_id

    @compute_id.setter
    def compute_id(self, compute_id):
        """Sets the compute_id of this Queue.

        Compute Environment Id  # noqa: E501

        :param compute_id: The compute_id of this Queue.
        :type compute_id: str
        """

        self._compute_id = compute_id

    @property
    def workflow_files(self):
        """Gets the workflow_files of this Queue.

        Workflow/Tool files and templates  # noqa: E501

        :return: The workflow_files of this Queue.
        :rtype: List[str]
        """
        return self._workflow_files

    @workflow_files.setter
    def workflow_files(self, workflow_files):
        """Sets the workflow_files of this Queue.

        Workflow/Tool files and templates  # noqa: E501

        :param workflow_files: The workflow_files of this Queue.
        :type workflow_files: List[str]
        """

        self._workflow_files = workflow_files

    @property
    def workflow_input(self):
        """Gets the workflow_input of this Queue.

        Path to workflow inputs  # noqa: E501

        :return: The workflow_input of this Queue.
        :rtype: str
        """
        return self._workflow_input

    @workflow_input.setter
    def workflow_input(self, workflow_input):
        """Sets the workflow_input of this Queue.

        Path to workflow inputs  # noqa: E501

        :param workflow_input: The workflow_input of this Queue.
        :type workflow_input: str
        """

        self._workflow_input = workflow_input

    @property
    def created_on(self):
        """Gets the created_on of this Queue.

        Time of creation  # noqa: E501

        :return: The created_on of this Queue.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Queue.

        Time of creation  # noqa: E501

        :param created_on: The created_on of this Queue.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def submission_type(self):
        """Gets the submission_type of this Queue.

        Path to workflow inputs  # noqa: E501

        :return: The submission_type of this Queue.
        :rtype: str
        """
        return self._submission_type

    @submission_type.setter
    def submission_type(self, submission_type):
        """Sets the submission_type of this Queue.

        Path to workflow inputs  # noqa: E501

        :param submission_type: The submission_type of this Queue.
        :type submission_type: str
        """
        allowed_values = ["docker", "file", "workflow", "workflow_inputs"]  # noqa: E501
        if submission_type not in allowed_values:
            raise ValueError(
                "Invalid value for `submission_type` ({0}), must be one of {1}"
                .format(submission_type, allowed_values)
            )

        self._submission_type = submission_type
